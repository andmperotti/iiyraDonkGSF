<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin</title>
    <link rel="stylesheet" href="css/style.css" type="text/css">
    <link
    rel="icon"
    type="image/png"
    sizes="32x32"
    href="/images/favicon-32x32.png"
  />
</head>
<body>
    <header>
        <nav class="topNav">
            <a href="/" class="nav-link"><span>Main</span></a>
            <a href="/login" class="nav-link"><span>Login</span></a>
            <a href="/signup" class="nav-link"><span>Signup</span></a>
            <a href="/request" class="nav-link"><span>Request</span></a>
            <a href="/uniques" class="nav-link"><span>Uniques</span></a>
            <a href="/gems" class="nav-link"><span>Gems</span></a>
            <a href="/others" class="nav-link"><span>Others</span></a>
            <a href="/jobs" class="nav-link"><span>Jobs</span></a>
            <a href="/users" class="nav-link"><span>Users</span></a>
            <a href="/builds" class="nav-link"><span>Builds</span></a>
            <a href="/resources" class="nav-link"><span>Resources</span></a>
            <a href="/admin" class="nav-link"><span>Admin</span></a>
            <a href="/logout" class="nav-link logout"><span>Logout</span></a>
        </nav>
    </header>

    <button id="menuButton" type="button">Menu</button>
    <nav class="menuNav">
        <a href="/" class="nav-link"><span>Main</span></a>
        <a href="/login" class="nav-link"><span>Login</span></a>
        <a href="/signup" class="nav-link"><span>Signup</span></a>
        <a href="/request" class="nav-link"><span>Request</span></a>
        <a href="/uniques" class="nav-link"><span>Uniques</span></a>
        <a href="/gems" class="nav-link"><span>Gems</span></a>
        <a href="/others" class="nav-link"><span>Others</span></a>
        <a href="/jobs" class="nav-link"><span>Jobs</span></a>
        <a href="/users" class="nav-link"><span>Users</span></a>
        <a href="/builds" class="nav-link"><span>Builds</span></a>
        <a href="/resources" class="nav-link"><span>Resources</span></a>
        <a href="/admin" class="nav-link"><span>Admin</span></a>
        <a href="/logout" class="nav-link logout"><span>Logout</span></a>
    </nav>

    <h1>God Mode</h1>
    <p class="centered-description">By default ordering of list is age order; first/oldest created to -> last/newly created.</p>

    <table class="all-requested">
      <thead>
      <tr class="field-description">
          <th scope="col" onclick="sorttable(0)">POE Account ↑↓</th>
          <th scope="col" onclick="sorttable(1)">Discord Name ↑↓</th>
          <th scope="col">Actions</th>
      </tr>
      </thead>
      <tbody>
        <% users.forEach( el => { %>
            <%
                let poeAccountName = el.userName;
                let firstNameMatch = poeAccountName.match(/(\w+)\#/); 
                let descriptorMatch = poeAccountName.match(/\#(\d+)/); 
                let firstName = firstNameMatch ? firstNameMatch[1] : ''; 
                let descriptor = descriptorMatch ? descriptorMatch[1] : ''; 
            %>
            <tr class='requestedItem' data-id='<%=el._id%>'>
                <td class="requested-cell">
                    <a href="https://www.pathofexile.com/account/view-profile/<%=firstName%>-<%=descriptor%>"><%= el.userName %></a>
                </td>  
                <td class="requested-cell"><%= el.discordName%></td>
                <td class="adminActions">
                        <% if(!el.isVerified){%>
                            <span class="verifyUser">Verify</span>
                        <%}%>                        
                        <% if(el.isVerified){%>
                            <span class="verifiedUser">Verified</span>
                        <%}%>
                         <% if(!el.isAdmin){%>
                            <span class="adminUser">Admin</span>
                        <%}%>
                        <% if(el.isAdmin){%>
                            <span class="unadmin-button">UnAdmin</span>
                        <%}%>
                        <span class="deleteUser">Delete</span>
                </td>
            </tr>
        <% }) %>
    </tbody>
    </table>
    <button id="admin-wipe-button">Wipe Everything/ Season Reset</button>

    <script src="js/main.js"></script>
    <script>
        let adminSeasonWipeButton = document.querySelector("#admin-wipe-button");
        
    async function wipeSeason() {
        try {
            let confirm = await verifyModal(
            "Delete:",
            // eslint-disable-next-line prettier/prettier
            'Everything (builds, jobs, requested items)'
            );
            if (confirm === true) {
            const response = await fetch("admin/seasonWipe", {
                method: "delete",
                headers: { "Content-type": "application/json" },
                body: null,
            });
            const data = await response
            location.assign('/seasonWipe')
            }
        } catch (err) {
            console.log(err);
        }
    }

        adminSeasonWipeButton.addEventListener("click", wipeSeason);

        const deleteUserBtn = document.querySelectorAll(".deleteUser");
        const verifyUserBtn = document.querySelectorAll(".verifyUser");
        const adminUserBtn = document.querySelectorAll(".adminUser");
        Array.from(deleteUserBtn).forEach((el) => {
            el.addEventListener("click", deleteUser);
        });
        Array.from(verifyUserBtn).forEach((el) => {
            el.addEventListener("click", verifyUser);
        });

        Array.from(adminUserBtn).forEach((el) => {
            el.addEventListener("click", adminUser);
        });

        async function deleteUser() {
            const requestId = this.parentNode.parentNode.dataset.id;
            try {
                let confirm = await verifyModal(
                "Delete:",
                // eslint-disable-next-line prettier/prettier
                this.parentNode.parentNode.childNodes[1].textContent.trim()
                );
                if (confirm === true) {
                const response = await fetch("admin/deleteUser", {
                    method: "delete",
                    headers: { "Content-type": "application/json" },
                    body: JSON.stringify({
                    requestIdFromJsFile: requestId,
                    }),
                });
                const data = await response.json();
                location.reload();
                }
            } catch (err) {
                console.log(err);
            }
        }

        async function verifyUser() {
            const requestId = this.parentNode.parentNode.dataset.id;
            try {
                let confirm = await verifyModal(
                "Verify:",
                // eslint-disable-next-line prettier/prettier
                this.parentNode.parentNode.childNodes[1].textContent.trim()
                );
                if (confirm === true) {
                const response = await fetch("admin/verifyUser", {
                    method: "post",
                    headers: { "Content-type": "application/json" },
                    body: JSON.stringify({
                    requestIdFromJsFile: requestId,
                    }),
                });
                const data = await response.json();
                location.reload();
                }
            } catch (err) {
                console.log(err);
            }
        }

        async function adminUser() {
            const requestId = this.parentNode.parentNode.dataset.id;
            try {
                let confirm = await verifyModal(
                "Admin:",
                // eslint-disable-next-line prettier/prettier
                this.parentNode.parentNode.childNodes[1].textContent.trim()
                );
                if (confirm === true) {
                const response = await fetch("admin/adminUser", {
                    method: "post",
                    headers: { "Content-type": "application/json" },
                    body: JSON.stringify({
                    requestIdFromJsFile: requestId,
                    }),
                });
                const data = await response.json();
                location.reload();
                }
            } catch (err) {
                console.log(err);
            }
        }

        let unadminButtons = document.querySelectorAll('.unadmin-button')

        async function unAdminUser() {
            if(this.parentNode.parentNode.children[0].innerText!=='Drevvska#5067'){
                const requestId = this.parentNode.parentNode.dataset.id;
                try {
                    let confirm = await verifyModal(
                    "Unadmin:",
                    // eslint-disable-next-line prettier/prettier
                    this.parentNode.parentNode.childNodes[1].textContent.trim()
                    );
                    if (confirm === true) {
                    const response = await fetch("admin/unAdminUser", {
                        method: "post",
                        headers: { "Content-type": "application/json" },
                        body: JSON.stringify({
                        requestIdFromJsFile: requestId,
                        }),
                    });
                    const data = await response.json();
                    location.reload();
                    }
                } catch (err) {
                    console.log(err);
                }
            }else{
                reject('cannot unadmin drevvska')
            }
        }

        unadminButtons.forEach(el=>{
            el.addEventListener('click', unAdminUser)
        })
    </script>
</body>
</html>
